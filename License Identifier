// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;
contract MyToken {
    // Public variables
    string public tokenName;
    string public tokenAbbrv;
    uint256 public totalSupply;
    // Mapping to store balances
    mapping(address => uint256) public balances;
    // Constructor to initialize the token details
    constructor(string memory _name, string memory _abbrv, uint256 _initialSupply) {
        tokenName = name;
        tokenAbbrv = abbrv;
        totalSupply = initialSupply;
        balances[msg.sender] = initialSupply; // Initial supply to contract deployer
    }
    // Mint function to create new tokens
    function Mint(address _to, uint256 _value) public {
        totalSupply += _value;
        balances[_to] += _value;
    }
 // Burn function to destroy tokens
    function Burn(address _from, uint256 _value) public {
        require(balances[_from] >= _value, "Insufficient balance to Burn");
        totalSupply -= _value;
        balances[_from] -= _value;
    }
}
